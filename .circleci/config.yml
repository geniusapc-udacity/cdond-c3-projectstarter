version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  notify-slack:
    steps:
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  error-notification-slack:
    steps:
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
  install-tar-and-zip:
    steps:
      - run:
          name: Install tar and gzip
          command: |
            yum install tar -y
            yum install gzip -y
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - error-notification-slack

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - error-notification-slack

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run
      - error-notification-slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test
      - error-notification-slack

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - error-notification-slack

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            exit 0
            # manual update required for webpack
            # npm audit --audit-level=critical
      - error-notification-slack

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name InitialStack \
      #         --parameter-overrides ID=udapeople-kk1j287dhjppmz345
      - install-tar-and-zip
      - run:
          name: Add back-end ip to ansible inventory.txt
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['5e:d1:7e:80:13:b5:72:7d:b3:54:8c:91:1f:3c:fd:b3']
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add openssl
      - run:
          name: Configure server
          command: |
            ls
            cat .circleci/ansible/inventory.txt
            echo "prince2"
            cd .circleci/ansible
            pwd
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
        # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        # filters:
        #   branches:
        #     only: [master]
      - configure-infrastructure
          # requires: [deploy-infrastructure]
